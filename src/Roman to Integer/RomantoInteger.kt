package `Roman to Integer`


/**
 *
 * 解題思路
 * 這題的處理是字串處理
 * 我們可以使用 mapOf() 和字串的 indices 來進行處理
 *
 * 網站 : https://leetcode.com/problems/regular-expression-matching/
 *
 * 這個題目的目標是將一個表示羅馬數字的字串轉換成對應的整數。羅馬數字使用七個基本符號，每個符號有固定的數值，具體如下：
 *
 * Symbol	Value
 * I	1
 * V	5
 * X	10
 * L	50
 * C	100
 * D	500
 * M	1000
 *
 * 基本規則
 * 	1.	從大到小相加
 * 通常情況下，羅馬數字是從左到右由大到小排列，這樣只需要將每個符號對應的數值加總即可。
 * 例如：“VIII” 代表 5 + 1 + 1 + 1 = 8。
 * 	2.	減法規則
 * 當一個較小的數字出現在一個較大的數字前面，表示需要用較大的數字減去較小的數字。
 * 常見情況包括：
 * 	•	I 放在 V (5) 和 X (10) 前面，分別代表 4 (IV) 和 9 (IX)
 * 	•	X 放在 L (50) 和 C (100) 前面，分別代表 40 (XL) 和 90 (XC)
 * 	•	C 放在 D (500) 和 M (1000) 前面，分別代表 400 (CD) 和 900 (CM)
 * 例如：“IV” 表示 5 - 1 = 4；“IX” 表示 10 - 1 = 9。
 *
 * 如何轉換
 *
 * 一種常見的算法是遍歷整個字串，對於每個符號，檢查它是否需要被加上還是被減去：
 * 	1.	遍歷字串：
 * 從左到右逐個讀取符號。
 * 	2.	判斷加減：
 * 	•	如果當前符號的值小於其右邊的符號（若存在），就應該減去這個值。
 * 	•	否則，就加上這個值。
 * 	3.	累加結果：
 * 將每一步的結果累加起來，最終得到整數。
 *
 * 舉例說明
 *
 * Example 1: “III”
 * 	•	遍歷：“I”、“I”、“I”
 * 	•	每個 “I” 的值為 1，且沒有出現需要減法的情況。
 * 	•	累加：1 + 1 + 1 = 3
 * 	•	輸出：3
 *
 * Example 2: “LVIII”
 * 	•	分解：
 * 	•	L = 50
 * 	•	V = 5
 * 	•	III = 1 + 1 + 1
 * 	•	加總：50 + 5 + 1 + 1 + 1 = 58
 * 	•	輸出：58
 *
 * Example 3: “MCMXCIV”
 * 	•	分解：
 * 	•	M = 1000
 * 	•	CM = 900 (因為 C 在 M 前面，所以是 1000 - 100)
 * 	•	XC = 90 (X 在 C 前面，所以 100 - 10)
 * 	•	IV = 4 (I 在 V 前面，所以 5 - 1)
 * 	•	加總：1000 + 900 + 90 + 4 = 1994
 * 	•	輸出：1994
 *
 * 總結
 * 	•	這個問題的核心在於理解羅馬數字的加法與減法規則。
 * 	•	當較小的數字出現在較大數字前面時，需要用較大數字減去較小數字。
 * 	•	解法通常是遍歷字串，根據當前和下一個符號的大小關係決定加法或減法，然後累加計算出最終的整數。
 *
 *
 * 以 "MCMXCIV" 為例說明流程：
 * 	•	輸入字串：M C M X C I V
 * 	•	索引與數值：
 * 	•	索引 0: M → 1000
 * 	•	索引 1: C → 100
 * 	•	索引 2: M → 1000
 * 	•	索引 3: X → 10
 * 	•	索引 4: C → 100
 * 	•	索引 5: I → 1
 * 	•	索引 6: V → 5
 *
 * 計算過程：
 * 	•	索引 0: 當前 1000，下一個是 100。1000 ≥ 100，所以 result = 0 + 1000 = 1000。
 * 	•	索引 1: 當前 100，下一個是 1000。100 < 1000，所以 result = 1000 - 100 = 900。
 * 	•	索引 2: 當前 1000，下一個是 10。1000 ≥ 10，所以 result = 900 + 1000 = 1900。
 * 	•	索引 3: 當前 10，下一個是 100。10 < 100，所以 result = 1900 - 10 = 1890。
 * 	•	索引 4: 當前 100，下一個是 1。100 ≥ 1，所以 result = 1890 + 100 = 1990。
 * 	•	索引 5: 當前 1，下一個是 5。1 < 5，所以 result = 1990 - 1 = 1989。
 * 	•	索引 6: 當前 5，這是最後一個，所以 result = 1989 + 5 = 1994。
 *
 * 最終返回的結果為 1994。
 *
 *
 * */

fun romanToInt(s: String): Int {
    // 建立一個 Map 將羅馬字元對應到它們的數值
    val romanMap = mapOf(
        'I' to 1,
        'V' to 5,
        'X' to 10,
        'L' to 50,
        'C' to 100,
        'D' to 500,
        'M' to 1000
    )

    var result = 0  // 用來累加最終的結果

    // 以 for 迴圈遍歷字串中的每個字元
    for (i in s.indices) {
        // 取得當前字元對應的數值，這裡使用 !! 表示確定 Map 中一定有對應的值
        val currentVal = romanMap[s[i]]!!

        // 如果不是字串的最後一個字元，則需要比較下一個字元的數值
        if (i < s.lastIndex) {
            val nextVal = romanMap[s[i + 1]]!!
            // 如果當前數值小於下一個數值，代表此處需要做減法（例如 IV 表示 5-1）
            if (currentVal < nextVal) {
                result -= currentVal
            } else {
                // 否則正常加上當前數值
                result += currentVal
            }
        } else {
            // 當前字元已是最後一個，直接加上
            result += currentVal
        }
    }

    return result
}

fun main() {
    /**
     * Example 1:
     * Input: s = "III"
     * Output: 3
     * Explanation: III = 3.
     */
    println(romanToInt("III"))

    /**
     * Example 2:
     * Input: s = "LVIII"
     * Output: 58
     * Explanation: L = 50, V= 5, III = 3.
     */
    println(romanToInt("LVIII"))

    /**
     * Example 3:
     * Input: s = "MCMXCIV"
     * Output: 1994
     * Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
     */
    println(romanToInt("MCMXCIV"))

}